package com.stokey.designpattern.struct.facade;

/**
 * Created by tiangen on 2017/8/10.
 */

/**
 * 门面模式——提供一个访问子系统的统一接口
 * <p>
 * 要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行
 * 提供一个高层次的接口，使得子系统更易于使用
 * <p>
 * 构成：
 * 1、Facade——门面角色（对于子系统角色而言，门面仅仅是另外一个客户端）
 * 2、subsystem——子系统角色
 * <p>
 * 优点：
 * 1、减少系统的相互依赖——外部与子系统（多个）的依赖 --> 外部与门面对象的依赖
 * 2、提高了灵活性——依赖减少，灵活度自然提高
 * 3、提高了安全性——门面对象是唯一能够访问子系统的通道
 * <p>
 * 缺点：
 * 不符合开闭原则。如果系统出错，只能修改门面角色代码
 * <p>
 * 使用场景：
 * 1、为一个复杂的模块或子系统提供一个外界访问的接口
 * 2、子系统相对独立——外界对子系统的访问只要黑箱操作即可
 * 3、预防低水平人员带来的风险扩散
 * <p>
 * 注意事项：
 * 1、一个子系统可以有多个门面——门面已经过于庞大／子系统可以提供不同访问路径
 * 2、门面不参与子系统内的业务逻辑，保持单一指责（如需要处理业务逻辑，则通过建立一个封装类，封装完成后提供给门面对象）
 * <p>
 * Adapter VS Facade
 * <p>
 * 异同点：
 * <p>
 * 相同点：
 * 都可以给外界提供一个统一的访问接口
 * <p>
 * 不同点：
 * 1、Adapter用在改造过程中，Facade用在开发过程中
 * 2、Adapter继承自Adaptee，并且实现了Target接口（子类关系）。Facade对象仅持有不同Target对象，然后对不同Target对象进行不同处理
 */
public class Client {
    public static void main(String[] args) {
        Facade facade = new Facade();
        facade.doSomethingA();
        facade.doSomethingB();
    }
}
